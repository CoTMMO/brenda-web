<!DOCTYPE html>
<html lang="en" ng-app="brenda">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
		<meta name="description" content="A Web Interface for the Brenda Render Farm Tool.">
		<meta name="author" content="Rob Sawyer">
		<!--<link rel="icon" href="../../favicon.ico">-->
		<title>Brenda Web App</title>

		<!-- Viewport mobile tag for sensible mobile support -->
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


		<!--
				Stylesheets and Preprocessors
				==============================

				You can always bring in CSS files manually with `<link>` tags, or asynchronously
				using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
				of Sails' conventional asset pipeline (boilerplate Gruntfile).

				By default, stylesheets from your `assets/styles` folder are included
				here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
				are supported. In production, your styles will be minified and concatenated into
				a single file.

				To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
				For example, here are a few things you could do:

						+ Change the order of your CSS files
						+ Import stylesheets from other directories
						+ Use a different or additional preprocessor, like SASS, SCSS or Stylus
		-->

		<!--STYLES-->
		<link rel="stylesheet" href="/styles/css/font-awesome.css">
		<link rel="stylesheet" href="/styles/dist/css/bootstrap.css">
		<link rel="stylesheet" href="/styles/importer.css">
		<link rel="stylesheet" href="/styles/toastr.css">
		<link rel="stylesheet" href="/styles/xstyles/dashboard.css">
		<!--STYLES END-->

		<!-- jQuery from Google's CDN -->
		<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

		<!-- Fall back to a local copy of jQuery if the CDN fails -->
		<script>
		window.jQuery || document.write('<script src="/js/dist/jquery.js"><\/script>')
		</script>

		<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
		<!--[if lt IE 9]>
			<script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
			<script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
		<![endif]-->
	</head>

	<body ng-controller="AppController">
		<%- partial('./partials/nav.ejs') %>

		<% if(typeof error !== 'undefined' && error.length > 0){ %>
			<!-- Error Handling -->
			<% if(typeof error.Errors !== 'undefined' && error.Errors.length > 0) { %>
				<!-- sails-hook-validation errors -->
				<% _.forEach(error.Errors, function(n){ %>
					<div class="alert alert-dismissible alert-danger" role="alert">
						<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<%= error.Error[n].message %>
					</div>
				<% }); %>
			<% } else { %>
				<% _.forEach(error, function(n){ %>
					<div class="alert alert-dismissible alert-danger" role="alert">
						<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<% if(typeof error[n] !== 'undefined' && typeof error[n].message !== 'undefined'){ %>
								<%= error[n].message %>
						<% } %>
					</div>
				<% }); %>
			<% } %>
			<!-- /Error Handling -->
		<% } %>

		<% if(typeof info !== 'undefined' && info.length > 0){ %>
			<!-- Notification Handling -->
				<% _.forEach(info, function(n){ %>
					<div class="alert alert-dismissible alert-info" role="alert">
						<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<%= info[0].message %>
						<% if(typeof info[n] !== 'undefined' && typeof info[n].message !== 'undefined'){ %>
							<%= info[n].message %>
						<% } %>
					</div>
				<% }); %>
			<!-- /Notification Handling -->
		<% } %>

		<% if(typeof success !== 'undefined' && success.length > 0){ %>
			<!-- Success Handling -->
				<% _.forEach(success, function(n){ %>
					<div class="alert alert-dismissible alert-success" role="alert">
						<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
						<% if(typeof success[n] !== 'undefined' && typeof success[n].message !== 'undefined'){ %>
							<%= success[n].message %>
						<% } %>
					</div>
				<% }); %>
			<!-- /Success Handling -->
		<% } %>

		<div class="container-fluid">
			<%- body %>

			<!--
					Client-side Templates
					========================

					HTML templates are important prerequisites of modern, rich client applications.
					To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
					that you load these templates client-side.

					By default, your Gruntfile is configured to automatically load and precompile
					client-side JST templates in your `assets/templates` folder, then
					include them here automatically (between TEMPLATES and TEMPLATES END).

					To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
					For example, here are a few things you could do:

							+ Import templates from other directories
							+ Use a different template engine (handlebars, jade, dust, etc.)
							+ Internationalize your client-side templates using a server-side
								stringfile before they're served.
			-->

			<!--TEMPLATES-->

			<!--TEMPLATES END-->

		</div> <!-- /container -->

		<!--

			Client-side Javascript
			========================

			You can always bring in JS files manually with `script` tags, or asynchronously
			on the client using a solution like AMD (RequireJS).  Or, if you like, you can
			take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

			By default, files in your `assets/js` folder are included here
			automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
			CoffeeScript (.coffee) are supported. In production, your scripts will be minified
			and concatenated into a single file.

			To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
			For example, here are a few things you could do:

					+ Change the order of your scripts
					+ Import scripts from other directories
					+ Use a different preprocessor, like TypeScript

		-->

		<!--SCRIPTS-->
		<script src="/js/dependencies/sails.io.js"></script>
		<script src="/js/angular.js"></script>
		<script src="/js/dist/jquery.js"></script>
		<script src="/js/dist/js/bootstrap.js"></script>
		<script src="/js/holder.js"></script>
		<script src="/js/ie10-viewport-bug-workaround.js"></script>
		<script src="/js/lodash.js"></script>
		<script src="/js/moment.js"></script>
		<script src="/js/rsvp.js"></script>
		<script src="/js/toastr.js"></script>
		<!--SCRIPTS END-->

		<script type="text/javascript">
		//Pretty file input buttons thanks to...
		//http://www.abeautifulsite.net/whipping-file-inputs-into-shape-with-bootstrap-3/
		$(document).on('change', '.btn-file :file', function() {
			var input = $(this),
				numFiles = input.get(0).files ? input.get(0).files.length : 1,
				label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
				input.trigger('fileselect', [numFiles, label]);
		});
		</script>
	</body>
</html>
